---
title: June Monthly Site Update
date: '2022-06-31'
tags: meta monthly
monthly: true
---

In the middle of this month (June) I had a bunch of new updates that I wanted to talk about, and the changes just keep coming. I made a decision to start grouping them into bigger posts and to post them *less often*. I didn't want all of my journals to be about site updates - I want to promote writing about other stuff and I don't want to overload the page with `meta` tagged posts.

### June 15

I decided to look at how the site works **without JavaScript** - it worked mostly good! SvelteKit is really awesome. However, it didn't work entirely. There are a few bugs that I still have to patch out, and there's still some learning to do.

The two main things are:

1. The title bar was always wrong (delayed by one site).
2. Folders would start closed, and you wouldn't be able to open them.

#### Title Bar

I am looking into a few solutions - `stores` were kind of strange / glitchy, `useContext` / `setContext` only sent data down, `page.stuff` only sent data down. They worked fine when JavaScript was enabled (except for a short hydration delay), but they straight up just *didn't work* without JavaScript. I was getting pages that rendered twice (`lists.html`, `lists/index.html`) with different titles -- it was really something. The problem was that `__layout.svelte` would generate with the default values, and then once those later components were nested and sent out the signal to update, `__layout.svelte` would no longer be listening. The solution I came to isn't my favorite, and maybe I'll learn what I needed to know at a later date to be able to fix it. I basically check the `page` path in the layout, take the first folder, and use that to determine what the title should be. This was weird and definitely not the svelte way, but it definitely works. I started with a dictionary, but I realized I can basically just Capitalize the first letter of that first folder, and it's exactly what I wanted it to be anyway. This will automatically update if I add new folders as well, but if I want to make the title anything different, I'll have to go back and make some modifications.

#### Folders

So by folders, I'm talking about what is currently the [tab-system for lexicon definitions](/journal/2022/6/5 and [lists](/lists/). For the folders to be open when JavaScript is disabled, I basically set their default value to the value of `browser` from [$app/env](https://kit.svelte.dev/docs/modules#$app-env). This way, it's set to hidden by default when rendered by the browser, and not hidden when rendered by the server. The only thing about this method is that you can see that they're open for a split-second when you reload the page, which is really annoying. I tried to set up a CSS animation to hide it for 1 second and then display it, but CSS animations can't use `display: none;`, and I didn't feel very good about that method anyway.

### June 16

There is now support for an optional 'hidden' value to the front matter / metadata of my journals, so any post marked hidden is now filtered out by the API. I'll write more about that later, but for now: I have a pseudo-API that gets generated with all the other static stuff. If you want to check it out, there are currently two 'endpoints' as listed:

#### Journals [ðŸ”—](/api/posts/journals.json)
This is basically a generated list of all the metadata / front matter for each of my journal entries. If the metadata is marked as hidden, it won't show up on this list. Each journal page loads this list and filters items on the list based on dates. Eventually, I want to add an XML endpoint for RSS readers.

#### Neocities Info [ðŸ”—](/api/neocities.json)
This is basically a 'pseudo-forwarder' to [neocities.org/api/list](https://neocities.org/api/info?sitename=stealdog). You can't directly ping the neocities API from a neocities site because of cross-site scripting errors, [and I don't think that's changing anytime soon](https://github.com/neocities/neocities/pull/196). This stores the result at compile time and is then saved in this file, which can be accessed from this front end. Right now I have the view counter on the [home page](/), and this is how I do that. I originally just ran a `fetch` on the API, but it needed some specific headers and technical stuff, so I ended up installing the [neocities package for node](https://github.com/neocities/neocities-node).

### June 21

I went through the CSS and made more sense of the font variables, putting most of the font-specific code in one file and finding some new ones with Google Fonts.

This is what it looks like now:
![Example of what the page looks like now](/images/journal/20220700/newcss.png "so pretty")

### June 28

1. Added [travel](/travel/) page for documenting trips.
2. Uploaded and formatted LA Photos, split between raw PNGs and small JPEGs.
3. Started setting up to add a gallery page.
4. Added another new font.

### June 29

Created [azlef900.neocities.org](https://azlef900.neocities.org)

### June 30

1. Started working on an experiments page to hold projects and stuff like [azlef900](https://azlef900.neocities.org/)
2. Tried out other new fonts, still deciding...
3. Installed `async-neocities`, wrote a new build script that can deploy without GitHub Actions or Ruby and be used across multiple projects